#include "SharpMemoryLcd.h"
#include <avr/pgmspace.h>

        static const int DISP = 2;
        static const int EXTC = 3;
        static const int EXTM = 4; //this can just be pulled high on your PCB if you need the pin
        static const int SI = 16;//11
        static const int SCS = 10;//12
        static const int SCLK = 14;//13
        
#define ARRAYSIZE 1152
//1152
/*
const unsigned char ARDUINOBMP[ARRAYSIZE] PROGMEM = {
	0,0,0,0,0,0,0,0,0,0,0,63,
	0,0,0,0,0,0,0,0,0,0,0,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,31,128,255,255,255,255,3,240,255,63,
	252,255,3,0,252,255,255,127,0,0,255,63,
	252,255,0,0,224,255,255,31,0,0,252,63,
	252,63,0,0,192,255,255,7,0,0,248,63,
	252,15,0,0,0,255,255,1,0,0,224,63,
	252,7,0,0,0,254,255,0,0,0,192,63,
	252,3,0,0,0,248,127,0,0,0,128,63,
	252,1,192,63,0,240,63,0,248,7,0,63,
	252,0,248,255,1,224,31,0,254,63,0,62,
	252,0,252,255,7,192,15,128,255,127,0,60,
	124,0,255,255,15,192,7,224,255,255,1,60,
	124,128,255,255,31,128,3,240,255,255,3,56,
	60,192,255,255,127,0,1,248,255,255,7,56,
	60,192,255,255,255,0,0,252,255,255,15,48,
	28,224,255,255,255,0,0,254,31,255,15,48,
	28,224,255,255,255,1,0,255,31,255,31,48,
	28,240,255,255,255,3,128,255,31,255,31,32,
	28,240,255,255,255,7,128,255,31,255,63,32,
	12,240,255,255,255,7,192,255,15,254,63,32,
	12,248,15,0,254,15,224,255,0,224,63,32,
	12,248,15,0,254,15,224,255,0,224,63,32,
	12,248,15,0,254,15,224,255,0,224,63,32,
	12,248,255,255,255,15,192,255,15,254,63,32,
	12,240,255,255,255,7,192,255,31,255,63,32,
	28,240,255,255,255,3,128,255,31,255,31,32,
	28,240,255,255,255,3,0,255,31,255,31,48,
	28,224,255,255,255,1,0,255,31,255,31,48,
	28,224,255,255,255,0,0,254,255,255,15,48,
	60,192,255,255,127,0,0,252,255,255,7,56,
	60,128,255,255,63,0,3,248,255,255,3,56,
	124,0,255,255,31,128,3,240,255,255,1,60,
	124,0,254,255,7,192,7,192,255,255,0,60,
	252,0,248,255,3,224,15,0,255,127,0,62,
	252,1,224,127,0,240,31,0,252,15,0,63,
	252,3,0,6,0,248,63,0,192,0,0,63,
	252,7,0,0,0,252,127,0,0,0,192,63,
	252,15,0,0,0,254,255,1,0,0,224,63,
	252,31,0,0,128,255,255,3,0,0,240,63,
	252,127,0,0,224,255,255,15,0,0,248,63,
	252,255,1,0,248,255,255,63,0,0,255,63,
	252,255,7,0,254,255,255,255,1,192,255,63,
	252,255,255,240,255,255,255,255,31,254,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,63,63,63,63,255,255,255,63,255,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	252,255,255,255,255,255,255,255,255,255,255,63,
	0,0,0,0,0,0,0,0,0,0,0,0,
	255,255,255,255,255,255,255,255,255,255,255,255
};*/
/*
const unsigned char ARDUINOBMP[ARRAYSIZE] PROGMEM = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x70, 0x1C, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xF8, 0x3C, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};*/
/*
const unsigned char ARDUINOBMP[ARRAYSIZE] PROGMEM = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xC0, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x07, 0xF0, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,
0x01, 0xFF, 0xFF, 0xC0, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFF, 0xFC,
0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xFF,
0xFF, 0xFF, 0xF8, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x07,
0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF,
0xFC, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0xFF, 0xFF,
0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x7F, 0xFF, 0xFF, 0xFE, 0x01, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0xFE, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xE0, 0x3F, 0xFF, 0xFF, 0xFC, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF,
0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x0F, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x07, 0xFF, 0xFF, 0xE0, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFE, 0x03, 0xFF, 0xFF, 0xE0, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xFF,
0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0xFF, 0xFF, 0x80, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0xFF, 0xFF, 0x81, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x7F,
0xFF, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x7F, 0xFE, 0x07, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x3F, 0xFE, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xF0, 0x3F, 0xFE, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x1F,
0xFC, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x1F, 0xFC, 0x1F, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x1F, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7C, 0x0F, 0xF8, 0x1E, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x3C, 0x0F,
0xF8, 0x3E, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x3E, 0x0F, 0xF8, 0x3E, 0x3F, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x3E, 0x0F, 0xF0, 0x3E, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFE, 0x3E, 0x07, 0xF0, 0x7E, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x3F, 0x07,
0xF0, 0x7E, 0x3F, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFE, 0x3F, 0x07, 0xF0, 0x7E, 0x3F, 0xE1,
0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xFE, 0x3F, 0x07, 0xF0, 0x7E, 0x3F, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF,
0x81, 0xFE, 0x3F, 0x07, 0xF0, 0x7E, 0x3F, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x81, 0xFE, 0x3F, 0x03,
0xE0, 0x7E, 0x3F, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x83, 0xFE, 0x3F, 0x83, 0xE0, 0xFE, 0x3F, 0xE1,
0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFE, 0x3F, 0x83, 0xE0, 0xFE, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFE, 0x3F, 0x83, 0xE0, 0xFE, 0x3F, 0xFF, 0xFF, 0xC0, 0x00, 0xFF, 0xFF, 0xFE, 0x3F, 0x83,
0xE0, 0xFE, 0x3F, 0xFF, 0xFF, 0x00, 0x00, 0x7F, 0xFF, 0xFE, 0x3F, 0x83, 0xE0, 0xFE, 0x3F, 0xFF,
0xFE, 0x00, 0x00, 0x3F, 0xFF, 0xFE, 0x3F, 0x83, 0xE0, 0xFE, 0x3F, 0xFF, 0xFE, 0x00, 0x00, 0x3F,
0xFF, 0xFE, 0x3F, 0x83, 0xE0, 0xFE, 0x3F, 0xFF, 0xFE, 0x00, 0x00, 0x3F, 0xFF, 0xFE, 0x3F, 0x83,
0xE0, 0x7E, 0x3F, 0xFF, 0xFE, 0x00, 0x00, 0x3F, 0xFF, 0xFE, 0x3F, 0x83, 0xF0, 0x7E, 0x3F, 0xFF,
0xFE, 0x38, 0x0E, 0x3F, 0xFF, 0xFE, 0x3F, 0x03, 0xF0, 0x7E, 0x3F, 0xFF, 0xFE, 0x3C, 0x1F, 0x3F,
0xFF, 0xFE, 0x3F, 0x07, 0xF0, 0x7E, 0x3F, 0xFF, 0xFF, 0x7E, 0x1F, 0xFF, 0xFF, 0xFE, 0x3F, 0x07,
0xF0, 0x7E, 0x3F, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xFE, 0x3F, 0x07, 0xF0, 0x7E, 0x3F, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x3F, 0x07, 0xF0, 0x3E, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFE, 0x3E, 0x07, 0xF8, 0x3C, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x3E, 0x0F,
0xF8, 0x3C, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x3E, 0x0F, 0xF8, 0x1C, 0x7F, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x1E, 0x0F, 0xF8, 0x18, 0x7C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xCF, 0x0C, 0x0F, 0xFC, 0x00, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0x80, 0x1F,
0xFC, 0x01, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0x80, 0x1F, 0xFC, 0x03, 0xFC, 0x7F,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xC0, 0x3F, 0xFE, 0x07, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x8F, 0xF0, 0x3F, 0xFE, 0x07, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xF0, 0x3F,
0xFF, 0x03, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xE0, 0x7F, 0xFF, 0x03, 0xFC, 0x3F,
0xFF, 0xFE, 0x3F, 0xFF, 0xFF, 0x0F, 0xE0, 0x7F, 0xFF, 0x81, 0xFE, 0x3F, 0xFF, 0xFE, 0x3F, 0xFF,
0xFF, 0x1F, 0xC0, 0xFF, 0xFF, 0x80, 0xFE, 0x3F, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0x1F, 0x80, 0xFF,
0xFF, 0xC0, 0xFE, 0x1F, 0xFF, 0xFC, 0x1F, 0xFF, 0xFE, 0x3F, 0x81, 0xFF, 0xFF, 0xE0, 0x7F, 0x1F,
0xFF, 0xF8, 0x0F, 0xFF, 0xFC, 0x3F, 0x03, 0xFF, 0xFF, 0xE0, 0x3F, 0x0F, 0xFF, 0xF0, 0x07, 0xFF,
0xF8, 0x7E, 0x03, 0xFF, 0xFF, 0xF0, 0x1F, 0x87, 0xFF, 0xE0, 0x03, 0xFF, 0xF0, 0x7C, 0x07, 0xFF,
0xFF, 0xF8, 0x0F, 0xC0, 0xFF, 0x80, 0x00, 0xFF, 0x80, 0xF8, 0x0F, 0xFF, 0xFF, 0xFC, 0x07, 0xE0,
0x00, 0x06, 0x30, 0x00, 0x03, 0xF0, 0x1F, 0xFF, 0xFF, 0xFC, 0x03, 0xF0, 0x00, 0x0E, 0x38, 0x00,
0x07, 0xE0, 0x1F, 0xFF, 0xFF, 0xFF, 0x01, 0xFE, 0x00, 0x7E, 0x3E, 0x00, 0x3F, 0xC0, 0x3F, 0xFF,
0xFF, 0xFF, 0x00, 0xFF, 0xE0, 0xFF, 0xFF, 0x83, 0xFF, 0x80, 0x7F, 0xFF, 0xFF, 0xFF, 0x80, 0x3F,
0xF0, 0x7F, 0xFF, 0x07, 0xFE, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x1F, 0xF8, 0x3F, 0xFC, 0x0F,
0xFC, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x07, 0xFC, 0x07, 0xF0, 0x1F, 0xF0, 0x07, 0xFF, 0xFF,
0xFF, 0xFF, 0xF8, 0x01, 0xFE, 0x00, 0x00, 0x7F, 0xC0, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00,
0x7F, 0x80, 0x00, 0xFF, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x1F, 0xF0, 0x0F, 0xFC,
0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x01, 0xFF, 0xFF, 0xC0, 0x00, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x0F, 0xF0, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8,
0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00,
0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xE0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};*/
const unsigned char ARDUINOBMP[ARRAYSIZE] PROGMEM = {
255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 1,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 0,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 15,
 224,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 63,
 0,
 0,
 248,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 3,
 0,
 0,
 128,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 0,
 0,
 0,
 0,
 254,
 255,
 255,
 255,
 255,
 255,
 255,
 31,
 0,
 0,
 0,
 0,
 240,
 255,
 255,
 255,
 255,
 255,
 255,
 7,
 0,
 224,
 15,
 0,
 192,
 255,
 255,
 255,
 255,
 255,
 255,
 3,
 128,
 255,
 255,
 3,
 128,
 255,
 255,
 255,
 255,
 255,
 255,
 0,
 240,
 255,
 255,
 63,
 0,
 254,
 255,
 255,
 255,
 255,
 63,
 0,
 254,
 255,
 255,
 255,
 0,
 248,
 255,
 255,
 255,
 255,
 31,
 128,
 255,
 255,
 255,
 255,
 3,
 240,
 255,
 255,
 255,
 255,
 15,
 224,
 255,
 255,
 255,
 255,
 15,
 224,
 255,
 255,
 255,
 255,
 7,
 248,
 255,
 255,
 255,
 255,
 63,
 192,
 255,
 255,
 255,
 255,
 1,
 252,
 255,
 255,
 255,
 255,
 127,
 0,
 255,
 255,
 255,
 255,
 0,
 255,
 255,
 255,
 255,
 255,
 255,
 1,
 254,
 255,
 255,
 127,
 128,
 255,
 255,
 255,
 255,
 255,
 255,
 3,
 254,
 255,
 255,
 127,
 192,
 255,
 255,
 255,
 255,
 255,
 255,
 7,
 252,
 255,
 255,
 63,
 224,
 255,
 255,
 255,
 255,
 255,
 255,
 15,
 248,
 255,
 255,
 31,
 240,
 255,
 255,
 255,
 255,
 255,
 255,
 31,
 240,
 255,
 255,
 15,
 248,
 255,
 255,
 255,
 255,
 255,
 255,
 63,
 224,
 255,
 255,
 7,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 192,
 255,
 255,
 7,
 254,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 192,
 255,
 255,
 3,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 129,
 255,
 255,
 1,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 129,
 255,
 255,
 129,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 3,
 255,
 255,
 192,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 7,
 254,
 255,
 192,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 7,
 254,
 127,
 224,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 15,
 252,
 127,
 224,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 15,
 252,
 127,
 240,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 31,
 248,
 63,
 240,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 31,
 248,
 63,
 248,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 63,
 248,
 31,
 248,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 62,
 240,
 31,
 120,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 60,
 240,
 31,
 124,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 124,
 240,
 31,
 124,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 124,
 240,
 15,
 124,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 124,
 224,
 15,
 126,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 252,
 224,
 15,
 126,
 252,
 207,
 255,
 255,
 255,
 255,
 231,
 127,
 252,
 224,
 15,
 126,
 252,
 135,
 255,
 255,
 255,
 255,
 195,
 127,
 252,
 224,
 15,
 126,
 252,
 3,
 255,
 255,
 255,
 255,
 129,
 127,
 252,
 224,
 15,
 126,
 252,
 3,
 255,
 255,
 255,
 255,
 129,
 127,
 252,
 192,
 7,
 126,
 252,
 7,
 255,
 255,
 255,
 255,
 193,
 127,
 252,
 193,
 7,
 127,
 252,
 135,
 255,
 255,
 255,
 255,
 231,
 127,
 252,
 193,
 7,
 127,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 252,
 193,
 7,
 127,
 252,
 255,
 255,
 3,
 0,
 255,
 255,
 127,
 252,
 193,
 7,
 127,
 252,
 255,
 255,
 0,
 0,
 254,
 255,
 127,
 252,
 193,
 7,
 127,
 252,
 255,
 127,
 0,
 0,
 252,
 255,
 127,
 252,
 193,
 7,
 127,
 252,
 255,
 127,
 0,
 0,
 252,
 255,
 127,
 252,
 193,
 7,
 127,
 252,
 255,
 127,
 0,
 0,
 252,
 255,
 127,
 252,
 193,
 7,
 126,
 252,
 255,
 127,
 0,
 0,
 252,
 255,
 127,
 252,
 193,
 15,
 126,
 252,
 255,
 127,
 28,
 112,
 252,
 255,
 127,
 252,
 192,
 15,
 126,
 252,
 255,
 127,
 60,
 248,
 252,
 255,
 127,
 252,
 224,
 15,
 126,
 252,
 255,
 255,
 126,
 248,
 255,
 255,
 127,
 252,
 224,
 15,
 126,
 252,
 255,
 255,
 127,
 248,
 255,
 255,
 127,
 252,
 224,
 15,
 126,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 252,
 224,
 15,
 124,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 124,
 224,
 31,
 60,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 124,
 240,
 31,
 60,
 254,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 124,
 240,
 31,
 56,
 254,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 120,
 240,
 31,
 24,
 62,
 255,
 255,
 255,
 255,
 255,
 255,
 243,
 48,
 240,
 63,
 0,
 63,
 254,
 255,
 255,
 255,
 255,
 255,
 241,
 1,
 248,
 63,
 128,
 63,
 254,
 255,
 255,
 255,
 255,
 255,
 241,
 1,
 248,
 63,
 192,
 63,
 254,
 255,
 255,
 255,
 255,
 255,
 241,
 3,
 252,
 127,
 224,
 63,
 254,
 255,
 255,
 255,
 255,
 255,
 241,
 15,
 252,
 127,
 224,
 63,
 254,
 255,
 255,
 255,
 255,
 255,
 241,
 15,
 252,
 255,
 192,
 63,
 254,
 255,
 255,
 255,
 255,
 255,
 241,
 7,
 254,
 255,
 192,
 63,
 252,
 255,
 127,
 252,
 255,
 255,
 240,
 7,
 254,
 255,
 129,
 127,
 252,
 255,
 127,
 252,
 255,
 255,
 248,
 3,
 255,
 255,
 1,
 127,
 252,
 255,
 63,
 248,
 255,
 255,
 248,
 1,
 255,
 255,
 3,
 127,
 248,
 255,
 63,
 248,
 255,
 127,
 252,
 129,
 255,
 255,
 7,
 254,
 248,
 255,
 31,
 240,
 255,
 63,
 252,
 192,
 255,
 255,
 7,
 252,
 240,
 255,
 15,
 224,
 255,
 31,
 126,
 192,
 255,
 255,
 15,
 248,
 225,
 255,
 7,
 192,
 255,
 15,
 62,
 224,
 255,
 255,
 31,
 240,
 3,
 255,
 1,
 0,
 255,
 1,
 31,
 240,
 255,
 255,
 63,
 224,
 7,
 0,
 96,
 12,
 0,
 192,
 15,
 248,
 255,
 255,
 63,
 192,
 15,
 0,
 112,
 28,
 0,
 224,
 7,
 248,
 255,
 255,
 255,
 128,
 127,
 0,
 126,
 124,
 0,
 252,
 3,
 252,
 255,
 255,
 255,
 0,
 255,
 7,
 255,
 255,
 193,
 255,
 1,
 254,
 255,
 255,
 255,
 1,
 252,
 15,
 254,
 255,
 224,
 127,
 0,
 255,
 255,
 255,
 255,
 7,
 248,
 31,
 252,
 63,
 240,
 63,
 192,
 255,
 255,
 255,
 255,
 15,
 224,
 63,
 224,
 15,
 248,
 15,
 224,
 255,
 255,
 255,
 255,
 31,
 128,
 127,
 0,
 0,
 254,
 3,
 240,
 255,
 255,
 255,
 255,
 63,
 0,
 254,
 1,
 0,
 255,
 0,
 248,
 255,
 255,
 255,
 255,
 255,
 0,
 248,
 15,
 240,
 63,
 0,
 254,
 255,
 255,
 255,
 255,
 255,
 1,
 128,
 255,
 255,
 3,
 0,
 255,
 255,
 255,
 255,
 255,
 255,
 7,
 0,
 240,
 15,
 0,
 192,
 255,
 255,
 255,
 255,
 255,
 255,
 31,
 0,
 0,
 0,
 0,
 240,
 255,
 255,
 255,
 255,
 255,
 255,
 127,
 0,
 0,
 0,
 0,
 252,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 3,
 0,
 0,
 128,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 63,
 0,
 0,
 248,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 7,
 192,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255,
 255
 };

SHARPMEMORYLCD::SHARPMEMORYLCD() {
  pinMode(DISP, OUTPUT);
  pinMode(EXTC, OUTPUT);
  pinMode(EXTM, OUTPUT); //this can be ignored and you can just pull the pin high on your PCB
  pinMode(SI, OUTPUT);
  pinMode(SCS, OUTPUT);
  pinMode(SCLK, OUTPUT);
  TCCR2B = TCCR2B & 0b11111000 | 0x07; //this sets the EXTC timer on pin 3. you need to change this to move pins
  constructor(96, 96);
  LcdClearBuffer();
}

SHARPMEMORYLCD::~SHARPMEMORYLCD(){/*nothing to destruct*/}

void SHARPMEMORYLCD::LcdInitialize() {
  digitalWrite(EXTM,HIGH);
  digitalWrite(DISP,HIGH);
  delayMicroseconds(50); 
}
void SHARPMEMORYLCD::LcdClearBuffer() {
  for(int x = 0;x < ARRAYSIZE;x++) {
    _buffer[x] = 255;
  }
  _invert = 0;
}
void SHARPMEMORYLCD::LcdAllClearMode() {
  int i;
  
  digitalWrite(SCS,HIGH);
  
  LcdSetMode(LOW, HIGH);
  
  for(i = 0; i < 14; i++){ //Send 14 bits of dummy data
    digitalWrite(SI,LOW);
    delayMicroseconds(3);
    LcdPost(-2);
  }

  digitalWrite(SCS,LOW);
  LcdClearBuffer();
}
void SHARPMEMORYLCD::LcdSetMode(int M0, int M2) {
  int i;
  digitalWrite(SI,M0);
  LcdPost();  
  digitalWrite(SI,HIGH);
  LcdPost();
  digitalWrite(SI,M2);
  LcdPost();
  for(i = 0; i < 5; i++){ //Send 5 bits of dummy data
    digitalWrite(SI,LOW);
    LcdPost();
  }    
}
void SHARPMEMORYLCD::LcdSendPixels(int num, int state) {
  int i;
  for(i = 0; i < num; i++){
      digitalWrite(SI,state);
      LcdPost(0);
  }  
}
void SHARPMEMORYLCD::LcdSetLineAddress(int line) {
  int i;  
  unsigned char tmp;
  
  for (i = 0; i < 8; i++){
    tmp = (line & 1);
    if (tmp == 1){
      digitalWrite(SI,HIGH);
      LcdPost(0);
    } else {
    digitalWrite(SI,LOW);
      LcdPost(0);
    }
    line = line >> 1;
  } 
}
void SHARPMEMORYLCD::LcdPrintImage(void)
{
  LcdPrintImage(0,ARRAYSIZE);
}
void SHARPMEMORYLCD::LcdPrintImage(int bitmap, int arraySize)
{
  int i,b;
  unsigned char LineCount;
  char temp;

  LineCount = 1;

  digitalWrite(SCS,HIGH);
  LcdSetMode(HIGH,LOW);

  LcdSetLineAddress(LineCount);

  for(i = 0; i < arraySize; i++){
    if(bitmap == 0)
      temp = pgm_read_byte(&ARDUINOBMP[i]);
    else if(bitmap == -1)
      temp = _buffer[i];
    if(_invert == 1) {
      temp = ~temp;
    }
    LcdSendByte(temp);     
    if((i+1) % 12 == 0){
      LcdSendPixels(8,0);
      LineCount++;
      if(LineCount < 97)
        LcdSetLineAddress(LineCount);
    }
  }
  delayMicroseconds(1);
  digitalWrite(SCS,LOW);
}
void SHARPMEMORYLCD::LcdPost() {
  LcdPost(1);
}
void SHARPMEMORYLCD::LcdPost(int delayTime) {
  digitalWrite(SCLK,HIGH);
  if(delayTime > 0) {
    delay(delayTime);
  }
  if(delayTime < 0) {
    delayMicroseconds(delayTime);
  }
  digitalWrite(SCLK,LOW);
}
void SHARPMEMORYLCD::LcdStartEXTC() {
  analogWrite(EXTC,127);
}
void SHARPMEMORYLCD::LcdStopEXTC() {
  analogWrite(EXTC,0);
}
void SHARPMEMORYLCD::LcdSendByte(char byteToSend) {
  for(int b = 0; b < 8; b++){
      if(byteToSend & 1){
        digitalWrite(SI,HIGH);
        delayMicroseconds(1);
        LcdPost(0);
      } else {
        digitalWrite(SI,LOW);
        delayMicroseconds(1);
        LcdPost(0);
      }
      byteToSend = byteToSend >> 1;
    }
}
void SHARPMEMORYLCD::LcdPrintBuffer() {
  LcdPrintImage(-1,ARRAYSIZE);
}
void SHARPMEMORYLCD::invert(uint8_t i) {
  _invert = i;
}
void SHARPMEMORYLCD::drawPixel(int16_t x, int16_t y, uint16_t color) {
  int xloc = ((y*12))+x/8;
  int shift = (x % 8);
  if (color)
    _buffer[xloc] |= (1 << shift);
  else
    _buffer[xloc] &= ~(1 << shift);
}
