#server script

dim uart1
dim connected

dim result
dim in(20) # endpoint data in
dim in_len
dim out(20) # endpoint data out
dim out_len

dim custom_adv_data(9)

event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
	uart1 = system_endpoint_uart1
	connected = 0
	call hardware_io_port_write(0, $FF, $00)
	call hardware_io_port_config_direction(0,$FF)
	call system_endpoint_set_watermarks(uart1, 0, 0) # disable watermarks
	call hardware_io_port_write(0, $1, $0) # LED off

	call gap_set_adv_parameters(320, 480, 7)
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
	
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
	if connected = 0 then
		call hardware_io_port_write(0,$1,$1) #LED on
		
	end if
	connected = 1
end

event connection_disconnected(connection ,reason)
	#set the flag to 0, since the connection was terminated.
	connected = 0
	
    #connection disconnected, continue advertising
	call system_endpoint_set_watermarks(uart1, 0, 0) # disable watermarks
	call gap_set_adv_data(1, 9, custom_adv_data(0:9))
    call gap_set_mode(gap_user_data, gap_undirected_connectable)
	
	# set port 0 pin P0_0 to "0" = Turn off the LED
	call hardware_io_port_write(0, $1, $0)	
end

event system_endpoint_watermark_rx(curr_endpoint, size)
	#call system_endpoint_tx(uart1, 1, "4")
    in_len = size
    if in_len > 20 then
       in_len = 20
    end if
    call system_endpoint_set_watermarks(uart1, 0, $ff) # disable RX watermark
    call system_endpoint_rx(uart1, in_len)(result, in_len, in(0:in_len))
    call attributes_write(xgatt_data, 0, in_len, in(0:in_len))
    
end

event system_endpoint_watermark_tx(curr_endpoint, size)
	#call system_endpoint_tx(uart1, 1, "5")
    if curr_endpoint = uart1 then
        call system_endpoint_set_watermarks(uart1, $ff, 0) # disable TX watermark
        call system_endpoint_tx(uart1, out_len, out(0:out_len))
        call attributes_user_write_response(0, 0)
		#call system_endpoint_set_watermarks(uart1, 1, $ff) # enable RX watermark
    end if
    
end

event attributes_value(connection, reason, handle, offset, value_len, value_data)
	#call system_endpoint_tx(uart1, 1, "1")
    if handle = xgatt_data then
        out(0:value_len) = value_data(0:value_len)
        out_len = value_len
        call system_endpoint_set_watermarks(uart1, $ff, out_len) # set TX watermark
    end if
    
end

event attributes_status(handle, flags)
	#call system_endpoint_tx(uart1, 1, "2")
    if (handle = xgatt_data) && (flags = 2) then
	   call system_endpoint_set_watermarks(uart1, 1, 0) # set RX watermark
    end if

end

event attclient_indicated(connection, handle)
	#call system_endpoint_tx(uart1, 1, "6")
    if handle = xgatt_data then
        call system_endpoint_set_watermarks(uart1, 1, $ff) # set RX watermark
    end if
    
end
